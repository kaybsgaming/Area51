component {

public function init(){
	return this;
}


public string function default(){
	// tools = new controller.moduletools();
	//tools.wrangleChangeLogs("/Users/marty/Desktop/3.2.9-1 new.txt","3.2.9-1 new.csv",true);
	//tools.wrangleChangeLogs("/Users/marty/Desktop/3.2.9-2.txt","3.2.9-2.csv", true);
	//tools.wrangleChangeLogs("/Users/marty/Desktop/3.2.9-3.txt","3.2.9-3.csv", true);

	return "/view/default.cfm";
}

public function setup(){
	// adjustDatabaseColumns();
	// processConstants();
	// processActions();
	// processRoles();
	processUsers();
	// processMimeTypes();
	// processTemplates();
}

private function processMimeTypes(){
var config=[
	{"fileext":".bmp","contenttype":"image/bmp","cfc":"contentImage"},
	{"fileext":".bmp","contenttype":"image/x-windows-bmp","cfc":"contentImage"},
	{"fileext":".css","contenttype":"text/css","cfc":"contentFile"},
	{"fileext":".gif","contenttype":"image/gif","cfc":"contentImage"},
	{"fileext":".htm","contenttype":"text/html","cfc":"contentFile"},
	{"fileext":".html","contenttype":"text/html","cfc":"contentFile"},
	{"fileext":".jpe","contenttype":"image/jpeg","cfc":"contentImage"},
	{"fileext":".jpe","contenttype":"image/pjpeg","cfc":"contentImage"},
	{"fileext":".jpeg","contenttype":"image/jpeg","cfc":"contentImage"},
	{"fileext":".jpeg","contenttype":"image/pjpeg","cfc":"contentImage"},
	{"fileext":".jpg","contenttype":"image/jpeg","cfc":"contentImage"},
	{"fileext":".jpg","contenttype":"image/pjpeg","cfc":"contentImage"},
	{"fileext":".mov","contenttype":"video/quicktime"},
	{"fileext":".mp2","contenttype":"audio/mpeg"},
	{"fileext":".mp2","contenttype":"audio/x-mpeg"},
	{"fileext":".mp2","contenttype":"video/mpeg"},
	{"fileext":".mp2","contenttype":"video/x-mpeg"},
	{"fileext":".mp2","contenttype":"video/x-mpeq2a"},
	{"fileext":".mp3","contenttype":"audio/mpeg3"},
	{"fileext":".mp3","contenttype":"audio/x-mpeg-3"},
	{"fileext":".mp3","contenttype":"video/mpeg"},
	{"fileext":".mp3","contenttype":"video/x-mpeg"},
	{"fileext":".pdf","contenttype":"application/pdf","cfc":"contentFile"},
	{"fileext":".png","contenttype":"image/png","cfc":"contentImage"},
	{"fileext":".text","contenttype":"text/plain","cfc":"contentFile"},
	{"fileext":".txt","contenttype":"text/plain","cfc":"contentFile"}
];
processJSON("mimetype",config);	
}

private function processUsers(){
var config = [
	{
		"username":"Marty Pine", 
		"twitter":"@underdogCMS", 
		"email":"marty@practicalpixels.co.nz", 
		"salt":"vEiKTjOTZZXRmxGYa0ehIe9KCfGQL78ECrFVDxXky90=", 
		"password":"A552521DEDC907830D283CAEEB9FDE27E2725DAA120970364F61A8263575ED21C8DC1E22F5104AE5A710A3AF38FD698649E24F22BAAD67EA7CEAD205666CE220", 
		"active":true
	}
];
processJSON("user",config);
// var marty = entityLoad("user",{email="marty@practicalpixels.co.nz"},true);
// var role = entityLoad("role",{title="admin"},true);
// transaction{
// 	marty.addRole(role);
// 	transaction action="commit";
// }
}


private function processRoles(){
	//"title", "system", "active", "publicGroup"
var config = [
	{
		"title":"Admin",
		"system":"1",
		"active":"1",
		"publicgroup":"0"
	},{
		"title":"Superuser",
		"system":"1",
		"active":"1",
		"publicgroup":"0"
	},{
		"title":"Editor",
		"system":"1",
		"active":"1",
		"publicgroup":"0"
	},{
		"title":"Publisher",
		"system":"1",
		"active":"0",
		"publicgroup":"0"
	},{
		"title":"Guest",
		"system":"1",
		"active":"0",
		"publicgroup":"0"
	}
];
processJSON("role",config);
}

private function processActions(){
var config = [
	{
		"title":"Read",
		"active":"1",
		"system":"1"
	},{
		"title":"Write",
		"active":"1",
		"system":"1"
	},{
		"title":"Delete",
		"active":"1",
		"system":"1"
	},{
		"title":"Publish",
		"active":"1",
		"system":"1"
	}
];
processJSON("action",config);
}

private function processConstants(){

var config=[
	{
		"title":"com.underdog.settings.itemsPerPage",
		"setting":"10",
		"active":"1",
		"public":"0",
		"system":"1",
		"helper":"Number of items that can be shown per page on lists/default pages"
	},{
		"title":"com.underdog.settings.uploadFileTypes",
		"setting":"application/pdf",
		"active":"1",
		"public":"0",
		"system":"1",
		"helper":"MimeTypes of allowed Files"
	},{
		"title":"com.underdog.settings.uploadImageTypes",
		"setting":"image/jpeg,image/gif,image/png",
		"active":"1",
		"public":"0",
		"system":"1",
		"helper":"MimeTypes of allowed Images"
	},{
		"title":"com.underdog.settings.fileInhaleThreshold",
		"setting":"524288",
		"active":"1",
 		"public":"0",
		"system":"1",
		"helper":"The size of the file before Underdog will store the file in the file system instead of the database"
	},{
		"title":"com.underdog.settings.ORM.propertyblacklist",
		"setting":"versionmapping,isVersioned,publishMajor,isExtended,active",
		"active":"1",
		"public":"0",
		"system":"1",
		"helper":"ORM Properties blackisted from being deserailized into JSON"
	},{
		"title":"com.underdog.settings.content.dateFormat",
		"setting":"mmmm dd, yyyy",
		"active": "1",
		"public": "1",
		"system":"1",
		"helper":"Default format for dates"
	},{
		"title":"com.underdog.security.user.profile.keyTypes",
		"setting":"[""String"",""Yes/No""]",
		"active":"1",
		"public":"0",
		"system":"1",
		"helper":"Types of custom keys allowed to be associated with user profiles"
	},{
		"title":"com.underdog.settings.page.keyblacklist",
		"setting":"leftid,entity,id,rightid,internalid,depth,json",
		"active":"1",
		"public":"0",
		"system":"1",
		"helper":"ORM Properties blacklisted from being deserialized into JSON for pages"
	},{
		"title":"com.underdog.settings.security.requiredReferrer",
		"setting":"",
		"active":"0",
		"public":"0",
		"system":"1",
		"helper":"(Optional) a URL where visitors to the public site must have come from"
	},{
		"title":"com.underdog.settings.security.bounceTo",
		"setting":"",
		"active":"0",
		"public":"0",
		"system":"1",
		"helper":"(Optional) where to send a user if they have not come from the URL defined in com.underdog.settings.security.requiredReferrer"
	}
];
processJSON("constant",config);
}

private function processJSON(e, config){
	var test = EntityLoad(e);
	if (not(arrayLen(test))){
		for (var c in config){
			transaction{
					var o = EntityNew(e);

					for (var k in c){
						invoke(o,"set"&k,[c[k]]);
					}
					EntitySave(o);
					transaction action="commit";
			}
		}
	}
}

private function adjustDatabaseColumns(){
// TODO - ensure contentFile, valueFile have their columns updated accordingly
	var t = "";
	dbinfo name="t" table="contentFile" type="columns";
			for (var c in t){
				//echo(c.column_name&"<br>");
				if (not(compareNoCase(c.column_name,"fileBlob")) OR not(compareNoCase(c.column_name,"thumbBlob"))  OR not(compareNoCase(c.column_name,"imageBlob"))){
					// we need to adjust these columns to be long blobs
					if (compareNoCase(c.type_name,"longblob")){
						queryExecute("ALTER TABLE contentFile MODIFY #c.column_name# LONGBLOB");
					}
				}
				
			}
/*	
		
			// MS SQL - sets to varbinary(16777215) to match MySQL MediumBlob - maybe use MAX if this becomes a maintenance issue;
			for (var c in t){
				//echo(c.column_name&"<br>");
				if (not(compareNoCase(c.column_name,"fileBlob")) OR not(compareNoCase(c.column_name,"thumbBlob"))){
					// we need to adjust these columns to be medium blobs
					if (compareNoCase(c.type_name,"mediumblob")){
						queryExecute("ALTER TABLE contentFile ALTER column #c.column_name# varbinary(max) null");
					}
				}
				
			}
			
*/

}

private function processTemplates(){
return;
var templates = EntityLoad("template");
if (not(arrayLen(templates))){// only run this if we have no templates = we don't want to overwrite any templates that may exist
	// these are the import strings generated by standard templates. we can eventually get this from a central template repository, matching by internalID (Skynet)
	var templates = {
		"Home Page":"",
		"Basic Content":"eyJtaW5vcnZlcnNpb24iOm51bGwsImRhdGVtb2RpZmllZCI6Ik5vdmVtYmVyLCAyMSAyMDE3IDE3OjA1OjAwICsxMzAwIiwiaXNtYXN0ZXJ0ZW1wbGF0ZSI6ZmFsc2UsIm1ham9ydmVyc2lvbiI6bnVsbCwicHVibGlzaG1ham9yIjp0cnVlLCJkaXNwbGF5Y29kZSI6IjxkaXYgaWQ9XCJ0aXRsZVwiPjwvZGl2PlxyXG48ZGl2IGlkPVwiY29udGVudFwiPjwvZGl2PlxyXG48IS0tIDxpbWcgc3JjPVwiL19pbWFnZS85L3RoaXMtaXMtbXktaW1hZ2UtbmFtZVwiPiAtLT5cclxuICA8IS0tIHRlc3QgLS0+IFxyXG4gICAgIDxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxyXG4gICAgICAkKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBkZWZpbmUgSlNPTi1UZW1wbGF0ZXMgaGVyZVxyXG4gICAgICAgICAgdmFyIHRpdGxlVGVtcGxhdGUgPSBqc29udGVtcGxhdGUuVGVtcGxhdGUoXCJ7LnRpdGxlP308aDM+e3RpdGxlfTwvaDM+ey5lbmR9XFxuXCIpOyBcclxuICAgICAgICAgIHZhciBjb250ZW50VGVtcGxhdGUgPSBqc29udGVtcGxhdGUuVGVtcGxhdGUoXCJ7LmludHJvP308ZW0gaWQ9XFxcImNvbnRlbnRJbnRyb1xcXCI+e2ludHJvfTwvZW0+ey5lbmR9e3BhZ2Vjb250ZW50fVxcblwiKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBleHBhbmQgdGhlIEpTT04gYWdhaW5zdCB0aGUgdGVtcGxhdGUgYW5kIGluamVjdCBpdCBpbnRvIEhUTUwgaGVyZVxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpLmlubmVySFRNTCA9IHRpdGxlVGVtcGxhdGUuZXhwYW5kKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIikuaW5uZXJIVE1MID0gY29udGVudFRlbXBsYXRlLmV4cGFuZChjb250ZW50KTtcclxuICAgICAgICB9KTtcclxuPFwvc2NyaXB0PiIsImlzZXJyb3IiOmZhbHNlLCJkYXRlY3JlYXRlZCI6Ik5vdmVtYmVyLCAxMyAyMDE3IDEzOjUzOjI3ICsxMzAwIiwiaXN2ZXJzaW9uZWQiOmZhbHNlLCJ2ZXJzaW9ubWFwcGluZyI6IntcIkRJU1BMQVlDT0RFXCI6XCJuVGV4dDJcIixcIkFDVElWRVwiOlwiYm9vbGVhbjFcIixcIlRJVExFXCI6XCJzdHJpbmcxXCIsXCJKU09OXCI6XCJuVGV4dDFcIn0iLCJkaXNwbGF5dGVtcGxhdGUiOm51bGwsImlkIjozLCJhY3RpdmUiOnRydWUsImlzbWFpbnRlbmFuY2UiOmZhbHNlLCJpbnRlcm5hbGlkIjoiRjZFRTRDQTUtNzZFNi00RUQ1LUIyQzkyMkFGRjYwRkFDNTYiLCJpc2Jsb2dsaXN0IjpmYWxzZSwidGl0bGUiOiJCYXNpYyBDb250ZW50IiwiaXNibG9ncG9zdCI6ZmFsc2UsImlzNDA0IjpmYWxzZSwianNvbiI6W3sibmFtZSI6InRpdGxlIiwibGFiZWwiOiJUaXRsZSIsInR5cGUiOiJ0ZXh0IiwiaGVscGVyIjoiTGFyZ2UgVGl0bGUgb24gdGhlIHBhZ2UsIHNob3duIG9uIHRvcCBvZiB0aGUgSGVhZGVyIEltYWdlIGlmIGl0IGlzIHVzZWQifSx7Im5hbWUiOiJJbnRybyIsInR5cGUiOiJ0ZXh0In0seyJuYW1lIjoicGFnZWNvbnRlbnQiLCJ0eXBlIjoicmljaFRleHQifSx7Im5hbWUiOiJzaG93dGl0bGUiLCJ0eXBlIjoiWWVzTm8iLCJsYWJlbCI6IlNob3cgVGl0bGUiLCJoZWxwZXIiOiJ3aGV0aGVyIG9yIG5vdCBzbyBzaG93IHRoZSBwYWdlIHRpdGxlIG92ZXIgdGhlIGhlYWRlciBpbWFnZSJ9XX0=",
		"Blog List":"eyJtaW5vcnZlcnNpb24iOm51bGwsImRhdGVtb2RpZmllZCI6Ik5vdmVtYmVyLCAxNSAyMDE3IDE1OjI5OjMwICsxMzAwIiwiaXNtYXN0ZXJ0ZW1wbGF0ZSI6ZmFsc2UsIm1ham9ydmVyc2lvbiI6bnVsbCwicHVibGlzaG1ham9yIjp0cnVlLCJkaXNwbGF5Y29kZSI6IjwhLS0gVW5kZXJkb2cgQ01TIFJlZmVyZW5jZSBCbG9nIExpc3RpbmcgLS0+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgPCEtLSBOZXdzIHYzIC0tPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInRpdGxlXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPCEtLSBFbmQgTmV3cyB2MyAtLT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPCEtLSBCbG9nIFBvc3QgQXV0aG9yIC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJibG9nLWF1dGhvciBtYXJnaW4tYm90dG9tLTMwXCIgaWQ9XCJhdXRob3JcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIEVuZCBCbG9nIFBvc3QgQXV0aG9yIC0tPlxyXG4gICAgICAgICAgICAgICAgICBcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICA8IS0tIEJsb2cgQWxsIFBvc3RzIC0tPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImJsb2dwb3N0c1wiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8IS0tIEVuZCBCbG9nIEFsbCBQb3N0cyAtLT5cclxuXHJcbiAgICA8IS0tIEJvb3RzdHJhcCBjb3JlIEphdmFTY3JpcHRcclxuICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPlxyXG5cclxuXHJcbjwhLS0gSlMgR2xvYmFsIENvbXB1bHNvcnkgLS0+XHJcblxyXG48IS0tIEpTIEltcGxlbWVudGluZyBQbHVnaW5zIC0tPlxyXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCIvYXNzZXRzL3BsdWdpbnMvZmFuY3lib3gvc291cmNlL2pxdWVyeS5mYW5jeWJveC5wYWNrLmpzXCI+PFwvc2NyaXB0PlxyXG48IS0tIEpTIEN1c3RvbWl6YXRpb24gLS0+XHJcbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiIHNyYz1cIi9hc3NldHMvanMvY3VzdG9tLmpzXCI+PFwvc2NyaXB0PlxyXG48IS0tIEpTIFBhZ2UgTGV2ZWwgLS0+XHJcbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiIHNyYz1cIi9hc3NldHMvanMvYXBwLmpzXCI+PFwvc2NyaXB0PlxyXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCIvYXNzZXRzL2pzL3BsdWdpbnMvZmFuY3ktYm94LmpzXCI+PFwvc2NyaXB0PlxyXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cclxuXHJcbiAgICBmdW5jdGlvbiB3cml0ZVRlbXBsYXRlKCkge1xyXG4vLyBkZWZpbmUgSlNPTi1UZW1wbGF0ZXMgaGVyZVxyXG4gICAgICB2YXIgaGVhZFRlbXBsYXRlID0ganNvbnRlbXBsYXRlLlRlbXBsYXRlKFwiPHRpdGxlPnt0aXRsZX08L3RpdGxlPnsuZGVzY3JpcHRpb24/fTxtZXRhIG5hbWU9XFxcImRlc2NyaXB0aW9uXFxcIiBjb250ZW50PVxcXCJ7ZGVzY3JpcHRpb259XFxcIi8+ey5lbmR9XCIpO1xyXG4gICAgICAgIHZhciB0aXRsZVRlbXBsYXRlPWpzb250ZW1wbGF0ZS5UZW1wbGF0ZShcInsucGFnZXRpdGxlP308c3Bhbj57cGFnZXRpdGxlfTwvc3Bhbj57LmVuZH1cXFxyXG57LnN1YnRpdGxlP308aDE+e3N1YnRpdGxlfTwvaDE+ey5lbmR9XCIpO1xyXG4gICAgICAgdmFyIG5hdlRlbXBsYXRlID0ganNvbnRlbXBsYXRlLlRlbXBsYXRlKFwiey5zZWN0aW9uIHRyZWV9XFxcclxuICAgICAgICBcdDx1bCBjbGFzcz1cXFwibmF2IG5hdmJhci1uYXZcXFwiPlxcXHJcbiAgICAgICAgXHR7LnJlcGVhdGVkIHNlY3Rpb24gQH1cXFxyXG4gICAgICAgIFx0XHR7LnNlY3Rpb24gY2hpbGRyZW59PGxpIGNsYXNzPVxcXCJkcm9wZG93blxcXCI+XFxcclxuICAgICAgICBcdFx0XHQ8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwiZHJvcGRvd24tdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1cXFwiZHJvcGRvd25cXFwiIHJvbGU9XFxcImJ1dHRvblxcXCIgYXJpYS1leHBhbmRlZD1cXFwiZmFsc2VcXFwiPnt0aXRsZX08c3BhbiBjbGFzcz1cXFwiY2FyZXRcXFwiPjwvc3Bhbj48L2E+ey5vcn08bGk+PGEgY2xhc3M9XFxcInRrLWZ1dHVyYS1wdFxcXCIgaHJlZj1cXFwie3VybH1cXFwiPjxzcGFuPnt0aXRsZX08L3NwYW4+PC9hPnsuZW5kfVxcXHJcbiAgICAgICAgXHRcdFx0ey5zZWN0aW9uIGNoaWxkcmVufTx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LW5hdlxcXCIgcm9sZT1cXFwibWVudVxcXCI+XFxcclxuICAgICAgICBcdFx0XHRcdHsucmVwZWF0ZWQgc2VjdGlvbiBAfTxsaT48YSBocmVmPVxcXCJ7dXJsfVxcXCI+PHNwYW4+e3RpdGxlfTwvc3Bhbj48L2E+PC9saT57LmVuZH1cXFxyXG4gICAgICAgIFx0XHRcdDwvdWw+ey5lbmR9XFxcclxuICAgICAgICBcdFx0PC9saT57LmVuZH1cXFxyXG4gICAgICAgIFx0ey5lbmR9PC91bD5cIik7XHJcbiAgICB2YXIgbGlzdFRlbXBsYXRlID0ganNvbnRlbXBsYXRlLlRlbXBsYXRlKFwiey5zZWN0aW9uIGJsb2dwb3N0c317LnJlcGVhdGVkIHNlY3Rpb24gQH08ZGl2IGNsYXNzPVxcXCJuZXdzLXYzIGJnLWNvbG9yLXdoaXRlIG1hcmdpbi1ib3R0b20tNjBcXFwiPlxcXHJcbnsuc2VjdGlvbiBpbWFnZXN9ey5wbHVyYWw/fTxkaXYgY2xhc3M9XFxcImNhcm91c2VsIHNsaWRlIGNhcm91c2VsLXYyXFxcIiBpZD1cXFwicG9ydGZvbGlvLWNhcm91c2VsLXtAaW5kZXh9XFxcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtaW5uZXJcXFwiPlxcXHJcbnsucmVwZWF0ZWQgc2VjdGlvbiBAfTxkaXYgY2xhc3M9XFxcIml0ZW0gey5AaW5kZXh8Zmlyc3RBY3RpdmV9XFxcIj48aW1nIGNsYXNzPVxcXCJpbWctcmVzcG9uc2l2ZSBmdWxsLXdpZHRoXFxcIiBzcmM9XFxcIntAfVxcXCIgYWx0PVxcXCJcXFwiPjwvZGl2PnsuZW5kfVxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImxlZnQgY2Fyb3VzZWwtY29udHJvbCByb3VuZGVkLXhcXFwiIGhyZWY9XFxcIiNwb3J0Zm9saW8tY2Fyb3VzZWwte0BpbmRleH1cXFwiIHJvbGU9XFxcImJ1dHRvblxcXCIgZGF0YS1zbGlkZT1cXFwicHJldlxcXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtYW5nbGUtbGVmdCBhcnJvdy1wcmV2XFxcIj48L2k+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcInJpZ2h0IGNhcm91c2VsLWNvbnRyb2wgcm91bmRlZC14XFxcIiBocmVmPVxcXCIjcG9ydGZvbGlvLWNhcm91c2VsLXtAaW5kZXh9XFxcIiByb2xlPVxcXCJidXR0b25cXFwiIGRhdGEtc2xpZGU9XFxcIm5leHRcXFwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWFuZ2xlLXJpZ2h0IGFycm93LW5leHRcXFwiPjwvaT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pnsub3J9PGltZyBjbGFzcz1cXFwiaW1nLXJlc3BvbnNpdmUgZnVsbC13aWR0aFxcXCIgc3JjPVxcXCJ7aW1hZ2VzfVxcXCIgYWx0PVxcXCJcXFwiPnsuZW5kfXsub3J9ey5lbmR9XFxcclxuPGRpdiBjbGFzcz1cXFwibmV3cy12My1pblxcXCI+XFxcclxuICAgICAgICA8aDI+PGEgaHJlZj1cXFwiL2Jsb2cve2lkfS97dGl0bGV8c2x1Z31cXFwiPnt0aXRsZX08L2E+PC9oMj5cXFxyXG4gICAgICAgIDx1bCBjbGFzcz1cXFwibGlzdC1pbmxpbmUgcG9zdGVkLWluZm9cXFwiPlxcXHJcbiAgICAgICAgICAgIDxsaT5CeSA8YSBocmVmPVxcXCIjXFxcIj57YXV0aG9yLnVzZXJuYW1lfTwvYT48L2xpPlxcXHJcbiAgICAgICAgICAgIDxsaT5Qb3N0ZWQge2RlcGxveWRhdGV9PC9saT5cXFxyXG4gICAgICAgIDwvdWw+XFxcclxuey5pbnRybz99PHA+e2ludHJvfTwvcD5cXFxyXG48YSBocmVmPVxcXCIvYmxvZy97aWR9L3t0aXRsZXxzbHVnfVxcXCI+PGg1PlJlYWQgTW9yZS4uLjwvaDU+PC9hPnsuZW5kfVxcXHJcbiAgICA8L2Rpdj5cXFxyXG48L2Rpdj5cXFxyXG57LmVuZH17LmVuZH1cIik7ICAgIFxyXG4vLyBleHBhbmQgdGhlIEpTT04gYWdhaW5zdCB0aGUgdGVtcGxhdGUgYW5kIGluamVjdCBpdCBpbnRvIEhUTUwgaGVyZVxyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKS5pbm5lckhUTUwgPSB0aXRsZVRlbXBsYXRlLmV4cGFuZChjb250ZW50KTtcclxuICAgICAgICAvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVyb2VzXCIpLmlubmVySFRNTCA9IGhlcm9UZW1wbGF0ZS5leHBhbmQoY29udGVudCk7XHJcbiAgICAgICAgXHJcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hdmJhclwiKS5pbm5lckhUTUwgPSBuYXZUZW1wbGF0ZS5leHBhbmQobmF2KTtcclxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmxvZ3Bvc3RzXCIpLmlubmVySFRNTCA9IGxpc3RUZW1wbGF0ZS5leHBhbmQoY29udGVudCk7XHJcbiAgICAgICAgJCgnaGVhZCcpLmFwcGVuZChoZWFkVGVtcGxhdGUuZXhwYW5kKHBhZ2UpKTtcclxuICAgICAgICBcclxuXHR9XHJcblxyXG4gICAgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICAgICBBcHAuaW5pdCgpO1xyXG4gICAgICAgIEZhbmN5Qm94LmluaXRGYW5jeWJveCgpO1xyXG5cdFx0d3JpdGVUZW1wbGF0ZSgpO1xyXG5cdH0pO1xyXG48XC9zY3JpcHQ+IiwiaXNlcnJvciI6ZmFsc2UsImRhdGVjcmVhdGVkIjoiTm92ZW1iZXIsIDEzIDIwMTcgMTY6NDE6MDIgKzEzMDAiLCJpc3ZlcnNpb25lZCI6ZmFsc2UsInZlcnNpb25tYXBwaW5nIjoie1wiRElTUExBWUNPREVcIjpcIm5UZXh0MlwiLFwiQUNUSVZFXCI6XCJib29sZWFuMVwiLFwiVElUTEVcIjpcInN0cmluZzFcIixcIkpTT05cIjpcIm5UZXh0MVwifSIsImRpc3BsYXl0ZW1wbGF0ZSI6bnVsbCwiaWQiOjQsImFjdGl2ZSI6dHJ1ZSwiaXNtYWludGVuYW5jZSI6ZmFsc2UsImludGVybmFsaWQiOiI4MDFCQjdDRS1CRTMxLTRBN0QtQTkxRjQxODM2QzUzRDI5OCIsImlzYmxvZ2xpc3QiOmZhbHNlLCJ0aXRsZSI6IkJsb2cgTGlzdGluZyIsImlzYmxvZ3Bvc3QiOmZhbHNlLCJpczQwNCI6ZmFsc2UsImpzb24iOlt7Im5hbWUiOiJ0aXRsZSIsInR5cGUiOiJ0ZXh0IiwibGFiZWwiOiJUaXRsZSIsImhlbHBlciI6IlRpdGxlIGZvciB0aGUgcGFnZSJ9LHsibmFtZSI6ImludHJvIiwidHlwZSI6InRleHQiLCJsYWJlbCI6IlBhZ2UgSW50cm8iLCJoZWxwZXIiOiJJbnJvIHRleHQifSx7Im5hbWUiOiJibG9nUG9zdHMiLCJ0eXBlIjoiZW50aXR5IiwiZW50aXR5IjoiY29udGVudE5ld3MiLCJtaW4iOiI1IiwiZHluYW1pYyI6InRydWUiLCJvcmRlcmJ5IjoiZGF0ZWNyZWF0ZWQgZGVzYyIsImxhYmVsIjoiTmV3cy9CbG9nIFBvc3RzIiwiaGVscGVyIjoiVGhlIEJsb2cgUG9zdHMgdGhhdCBhcHBlYXIgaW4gdGhlIGZvb3RlciJ9XX0=",
		"Blog Page":"",
		"Login Page":""
	};

	for (var t in templates){
		
	transaction {
		var o = EntityNew("template");
		o.setTitle("test");
		//o.importString(templates[t]);
		//dump(o);
		EntitySave(o);
		transaction action="commit";
	}
	}
	}
}

}